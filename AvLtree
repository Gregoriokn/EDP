#include<stdio.h>
#include<stdlib.h>

typedef struct _node{
    int reg;
    int h;
    struct _node * esq;
    struct _node * dir;
}tnode;

int altura(tnode *pnode)
{
    int ret;
    if(pnode==NULL)
    {
        ret=-1;

    }
    else
    {
        ret = pnode->h;
    }
    return ret;
}

int max(int a,int b)
{
    return (a>b)?a:b;
}


void imprime_arv(tnode * pnode,int p){
    int i;
    if (pnode != NULL){
        imprime_arv(pnode->esq,p+1);
        for (i=0;i<p;i++)
            printf("   ");
        printf("%d\n",pnode->reg);
        imprime_arv(pnode->dir,p+1);
    }
}

void destroi_arv(tnode * pnode){
    if (pnode != NULL){
        destroi_arv(pnode->esq);
        destroi_arv(pnode->dir);
        free(pnode);
    }
}

void pre_ordem(tnode *pnode){
    if (pnode != NULL){
        
        printf("(%d,%d) ",pnode->reg,pnode->h);
        pre_ordem(pnode->esq);
        pre_ordem(pnode->dir);
    }
}

tnode ** busca_pont(tnode ** pnode, int reg){
    tnode ** ret;
    if (*pnode == NULL){
        ret = NULL;
    }else if ((*pnode)->reg == reg){
        ret = pnode;
    }else{
        if (reg > (*pnode)->reg){
            ret = busca_pont(&(*pnode)->dir,reg);
        }else{
            ret = busca_pont(&(*pnode)->esq,reg);
        }

    }
    return ret;
}

void RE(tnode ** pnode){
    tnode * x;
    tnode * y;
    tnode * a;
    tnode * b;
    x = *pnode;
    y = x->dir;
    a = x->esq;
    b = y->esq;
    printf("RE %d\n", x->reg );

    x->esq = a;
    x->dir = b;
    y->esq = x;
    *pnode = y;

    x->h = max(altura(x->esq),altura(x->dir))+1;
    y->h = max(altura(y->esq),altura(y->dir))+1;
}

void RD(tnode ** pnode){
    tnode * x;
    tnode * y;
    tnode * a;
    tnode * b;
    y = *pnode;
    x = y->esq;
    a = x->esq;
    b = x->dir;
    printf("RD %d\n", y->reg);

    x->esq = a;
    x->dir = y;
    y->esq = b;
    *pnode = x;
    y->h = max( altura(y->esq) , altura(y->dir))+1;
    x->h = max( altura(x->esq) , altura(x->dir))+1;
}

void _rebalancear(tnode **pnode)
{
    int     fb;   //fator balanceamento
    int     fbf;  //fator balanceamento filho
    tnode * filho;  // filho de maior altura 
    tnode * pai;
    pai = *pnode;
    fb = altura(pai->esq) - altura(pai->dir);
    if(fb == 2)
    {
        filho = pai->esq;
        fbf = altura(filho->esq) - altura(filho->dir);
        if(fbf == -1)
        {
            RE( &(pai->esq) );
        }
        RD(pnode);
        
    }
    if(fb == -2)
    {
        filho = pai->dir;
        fbf = altura(filho->esq) - altura(filho->dir);
        if(fbf == 1)
        {
            RD( &(pai->dir) );
        }
        RE(pnode);
        
    }
}

/*tnode *sucessor(tnode **pnode)
{
  tnode *aux;
  tnode *paux=(*pnode);
  int flag=1;
  aux=(*pnode)->dir;
  while(aux->esq != NULL && flag)
  { 
    if(aux->esq == NULL)
      {
        flag=0;
        paux = aux;
      }
      aux = aux->esq;
  }
  return paux;
}*/

tnode **sucessor(tnode **pnode)
{
  tnode **aux;
  aux = &((*pnode)->dir);//primeiro percorre pra direita 1x
  while((*aux)->esq != NULL)
  {
    aux = &(*aux)->esq; //caso o no a esquerda seja !null  aux percorre a esq
  }
  return aux; // devolve ponteiro de ponteiro 
}

void insere(tnode ** parv,int num){
    if (*parv == NULL){
        *parv = (tnode *) malloc(sizeof(tnode));
        (*parv)->h = 0;
        (*parv)->reg = num;
        (*parv)->esq = NULL;
        (*parv)->dir = NULL;
    }else
    {
        if (num > (*parv)->reg){
            insere(&(*parv)->dir,num);
        }else{
            insere(&(*parv)->esq,num);
        }
        (*parv)->h = max( altura((*parv)->esq) , altura((*parv)->dir) ) + 1;
        _rebalancear(parv);
    }
}

void remove_no(tnode ** pnode, int reg)
{
	tnode *aux=*pnode;
  tnode **paux;
    if (*pnode == NULL)
    {
        printf("NAOEXISTE\n\n");
    }
    else
    {		
      if (reg > (*pnode)->reg) //vai pra direita
      {
            remove_no(&(*pnode)->dir,reg); 
           
           
      }
      else if (reg < (*pnode)->reg)// vai pra esquerda
      {
      	    remove_no(&(*pnode)->esq,reg);

      	   
      }
      else  // achou
      { 
      	  
          if(!(*pnode)->esq && !(*pnode)->dir)//caso os 2 filhos ==null
          {
             free(aux);
             (*pnode)=NULL;

          }
          else if(!(*pnode)->dir)//caso filho dir ==null
          {
               (*pnode) = (*pnode)->esq;
               aux->dir =NULL;
               free(aux);
               aux=NULL;
               
          }
          else if(!(*pnode)->esq)//caso filho esq == null
          {
              (*pnode)= (*pnode)->dir;
              aux->esq = NULL;
              free(aux);
              aux = NULL;
             
          }
          else
          {
               paux = sucessor(pnode);
               (*pnode)->reg = (*paux)->reg;
               remove_no(&((*pnode)->dir), (*paux)->reg);
              
          }

      }
      if(*pnode !=NULL)
      {
        (*pnode)->h = max( altura((*pnode)->esq) , altura((*pnode)->dir) ) + 1;
        _rebalancear(pnode);
      }
     
    }        
}



void in_ordem(tnode *pnode){
    if (pnode != NULL){
        
        in_ordem(pnode->esq);
        printf("(%d,%d) ",pnode->reg,pnode->h);
        in_ordem(pnode->dir);
    }
}
void pos_ordem(tnode *pnode){
    if (pnode != NULL){
        
        pos_ordem(pnode->esq);
        pos_ordem(pnode->dir);
        printf("(%d,%d) ",pnode->reg,pnode->h);
    }
}

int main(void){
    int num,n,j,m;

    tnode * arv;
    arv = NULL;
    #ifdef DEBUG
    freopen("text.txt","r",stdin);
    #endif
     
        scanf("%d",&n);
        scanf("%d", &m);
        for (j=0;j<n;j++)
        {
            scanf("%d",&num);
            insere(&arv,num);
        }
        in_ordem(arv);
        printf("\n");
        j=0;
        for(j=0;j<m;j++)
        {   
        //	printf("entro");
          scanf("%d", &num);
          //printf("1");
        	remove_no(&arv,num);
          pre_ordem(arv);
        	printf("\n");
        	in_ordem(arv);
        	printf("\n");
        	pos_ordem(arv);
        	printf("\n\n");
        }
    
        
        
        


    return 0;
}
